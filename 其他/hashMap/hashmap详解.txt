Map存入的是key - value在软件开发中是一个经典的结构。
hash:使用一个散列的结构，通过hash算将一个长的字符串，通过算的散列变为一个定长的

Map：存储的是一个key-value
总结：通过HASH出来的hash值，然后通过值定位到数组中，然后遍历的Entry然value存储到这个map中

hashMap：底层实现是数组+链表的实现

java 1.7
        源码分析：key value
        初始化容量1<<4  16     底层数据的大小
        最大的容量1<<30        最大值
        扩容因子  0.75f        在容量的3/4进行扩容      扩容涉及到rehash，复制数据【性能】
                                                      提前判断容量大小
        创建一个数组
        扩容变量：null就去默认值
        有三个构造方法


put
        如果数组是没有初始化，就会进行初始化
        key是可以为null，那么就会进行特殊处理了一些，将NULL当做Key处理，如果不为null，那么就执行hash
        得到数组的下标，然后对数据进行遍历Entry，如果key的hashcode等于hash值和key是否等于存在的值，那就
        将原来的值返回，将新值存进去。
        如果当前桶为空，那么就创建一个ENtry对象写入当前位置

        当扩容的时候，就需要将当前的key重新hash,并定位，需要将数据进行复制。

        key值不会覆盖，他会新值替换旧址=值


get     
        首先通过key计算出hashcode，然后通过定位到具体的桶，如
        判断该位置是否为链表
                不是：就根据key和key的hashCode判断与当前传入的key是否相同，如果相同就将值返回
                是：就遍历链表，将值取出

        

        什么时候扩容，当put的时候，参数慢3/4的时候进行扩容，

        一定是2的幂次方，默认是16.k扩容一直都是偶数。  


给定的默认容量为16，负载因子是0.75，map使用使用的使用会不断的增加数据，当达到16*0.75就需要
扩容，扩容就需要有数据的复制，就需要消耗性能【尽可能的减少扩容】


        在多线程的情况下，会发生循环





Entry是hashMap中的一个内部类，从他的成员变量很容易看出：
    （1）key就是写入时的键
    （2）value就是写入时的值

    开始的时候hashmap有数组和链表组成，所以这个next就用于实现链表结果
    hash存放当前key的hashcode


put操作：首先判断当前的数组是否需要初始化
        如果key  null，返回hash为0，那么就将null存进去
        根据key查找hashcode，根据hashcode定位出所在的桶
        如果桶中是一个链表则需要将桶变量hashcode，key是否和传入key相等
        如果相等，那就将其值返回
        如果是空，说明没有数据存入，新增一个Entry对象写入当前位置。

        当写入的时候，需要判断是否扩容，并将当前的key重新定位

get操作：
        首先也是根据key计算出hashcode，然后定位到桶中
        判断是否为链表
        不是就根据key的hashcode来获取值
        为链表，则需要遍历知道key和hashcode相同的时候
        啥都没有就为null

Java1.8

        1.7中有一个问题，如果hash冲突太多的时候，就会造成链表越来越长，这样查询就会比较慢，时间复杂度也是很高的

        将链表改为了红黑树和阈值，将hashEntry修改为Node
        hshEntry变为了Node

        Node的核心和hashEntry一样，存放的是key value hashcode  next的数据

        put操作之前判断桶是否为null，空的话就需初始化，根据当前的key的hashcode定位到具体桶中进行判断是否为null
        如果为null，就创建一个桶
        如果有桶，那么就比较桶中的key key的hashcode于写入的key是否相同，如果相同就将值付给e，
        如果当前桶为红黑树，那么需要按照红黑树将数据写入桶中

        如果是链表，就需要将当前的key value封装成一个节点，写入当前桶中

        判断阈值，如果大于阈值，那么就变为红黑数

        如果找到相同的key就直接退出遍历

        如果key中有值，然后将其覆盖掉
        最后判断是否扩容


        get操作
        （1）首先将key hash之后取得锁定位的桶
        （2）如果桶为null,那么就直接返回null
        （3）否则判断桶的第一个位置的key是否为查询的数据key，如果是就返回，如果不是就进行遍历链表
        或者红黑树
        1.8进行优化，提高了效率


        HashMap在多线程情况下会出现扩容的时候出现死循环



存在的问题：容易成为死循环

原因：hashMap扩容的时候会调用resize()方法，这里并发操作易生成一个桶上形成环形链表，计算出index正好是
环形链表的下标就会生成死锁





遍历方法：第一种使用迭代器 使用entrySet进行遍历
        第二种通过获取key的方式进行遍历

        没有做同步操作，会出现问题，甚至死循环


concurrentMap
        由数组和HashEntry组成和hashMap一样   也分为1.7和1.8


        1.7
        是有数组和链表组成，segment是CurrentHashMap的一个内部类
        核心变量：keySet和entrySet
        基本和hashMap一样，唯一区别就是核心数据是value，以及链表都是volidate修饰，保证数据 可见性


        原理上采用分段锁技术，其中segment继承Lock不同于hashTable无论如何操作，都需要有相同的同步处理，
        理论上都支持一定数量并发，并且不会影响到其他的segment


        put操作：通过key定位到segment，之后在对应的segment上进行put

        虽然可见，但是volatile不保证原子性，所以put是需要枷锁
        


put流程：首先第一步的时候，先去获取锁，如果获取锁失败，那摸有其他锁竞争，然后进行重试，重试次数达到一定知道时候
改为堵塞锁获取

当获取锁成功之后，就可以对进行put操作
        第一步首先进行hash确定segment中的HashEntry
        第二步：变量entry，如果不为null，就判断传入的key的遍历中的key是否相同，如果相同就将老值返回，将新值传入
        如果为null，那就创建一个HashEntry并加入到segment中，同时会判断是否需要扩容
        最后取消锁


get操作：只需要建key定位到hash，然后具体到segment之后，在通过一次hash定位到具体的元素
        因为数据都使用的是volatile，所以获得数据都是最新的
        非常高效，因为不枷锁


1.8  1.7解决了并发的问题支持N多访问

但是变量链表的速度太慢了

因此有调整
        抛弃了segment分布锁，采用CAS+Synchronize保证并发安全性。

        将Entry修改为Node












    （1）是由segment和HashEtry组成
    （2）核心变量：
        初始化桶的大小，桶的底层是数组，所以这是默认数组的大小      16
        桶的最大值                                              1左移30
        默认的负载因子                                          0.75f
        table真正存放数据数组                                   
        Map存放数量的大小
        桶的大小,可以在初始化时显示指定
        负载因子，可以在初始化是显示指定








































在这里帮大家总结一下hashMap和hashtable方面的知识点吧： 
   1.  关于HashMap的一些说法： 
        a)  HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。HashMap的底层结构是一个数组，数组中的每一项是一条链表。 
        b)  HashMap的实例有俩个参数影响其性能： “初始容量” 和 装填因子。
        c)  HashMap实现不同步，线程不安全。  HashTable线程安全 
        d)  HashMap中的key-value都是存储在Entry中的。 
        e)  HashMap可以存null键和null值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性 
        f)  解决冲突主要有三种方法：定址法，拉链法，再散列法。HashMap是采用拉链法解决哈希冲突的。 
        注： 链表法是将相同hash值的对象组成一个链表放在hash值对应的槽位；    
        用开放定址法解决冲突的做法是：当冲突发生时，使用某种探查(亦称探测)技术在散列表中形成一个探查(测)序列。 
        沿此序列逐个单元地查找，直到找到给定 的关键字，或者碰到一个开放的地址(即该地址单元为空)为止（若要插入，在探查到开放的地址，则可将待插入的新
        结点存人该地址单元）。  
        拉链法解决冲突的做法是： 将所有关键字为同义词的结点链接在同一个单链表中 。
        若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数 组T[0..m-1]。
        凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。
        在拉链法中，装填因子α可以大于1，但一般均取α≤1。拉链法适合未规定元素的大小。     
        2.  Hashtable和HashMap的区别： 
        a)   继承不同。  public class Hashtable extends Dictionary implements Map public class HashMap extends  AbstractMap implements Map 
        b)  Hashtable中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用Hashtable，但是要使用HashMap的话就要
        自己增加同步处理了。 
        c)  Hashtable 中， key 和 value 都不允许出现 null 值。 在 HashMap 中， null 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 null 。
        当 get() 方法返回 null 值时，即可以表示 HashMap 中没有该键，也可以表示该键所对应的值为 null 。因此，在 HashMap 中不能由 get() 方法来判断 HashMap
         中是否存在某个键， 而应该用 containsKey() 方法来判断。 
        d)  两个遍历方式的内部实现上不同。Hashtable、HashMap都使用了Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。 
        e)  哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。 
        f)  Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是11，增加的方式是old*2+1。HashMap中hash
        数组的默认大小是16，而且一定是2的指数。   
        注：  HashSet子类依靠hashCode()和equal()方法来区分重复元素。      
        HashSet内部使用Map保存数据，即将HashSet的数据作为Map的key值保存，这也是HashSet中元素不能重复的原因。
        而Map中保存key值的,会去判断当前Map中是否含有该Key对象，内部是先通过key的hashCode,确定有相同的hashCode之后，再通过equals方法判断是否相同