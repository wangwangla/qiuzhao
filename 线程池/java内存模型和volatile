JVM执行多线程任务时，共享数据保存在主内存中，每一个线程有自己的高速缓存区，线程对于共享数据的操作，首先将主内存中的数据复制到
本地缓存区中，然后将数据进行修改，如何保证数据的一致性。

解决方法：加锁和使用缓存一致性，如果缓存失效，那么就将数据值失效

并发编程的概念
    并发编程的三个概念，包含原子性、可见性、有序性

原子性：操作为原子性，那么要不成功，要不失败
 i++有两个步骤：将数据加载进入内存，将数据的值进行修改

 可见性：一个地方发生操作，其他线程可以感知到变化，会重新获取这个新值

 有序性：指代码执行的有序性，因为代码有可能发生指令重排序
 java提供了两种volatile和synchronize，volatile本身即是禁用重排序
 synchronize只要是单线程，执行结果就是一致的。

 volatile关键字
 起两个作用：将修改后的数据刷到主内中，使得其他的线程是无效的，  不会进行指令重排序


 volatile不是原子性，不会保证结果的正确性


 ActicInt是原子操作
  


  222