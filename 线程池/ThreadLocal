ThreadLocal:线程变量：是一个ThreadLocal对象为建，任何对象为值的存储结构，作为一个局部变量，它的修改不会引起我线程的冲突，
可以通过set设置值，通过get获取值

使用举例：使用ThreadLocal可以将进行统计执行时间。他是一个局部线程所以可以直接使用

什么是线程封闭
    当访问的共享变量是，需要枷锁来保证同步  一般避免使用同步的方式就是不共享数据，
    加入在单线程中访问数据就不会出现线程的问题，这就是线程封闭，
    在java中有一些类库专门做线程封闭，比如说ThreadLocal

理解ThreadLocal
    能使得线程中的某个值与保存值的对象关联起来，他提供了get和set方法，这些方法为每一个使用该变量的
    线程存入一份独立的副本，次副本的修，不会造成线程问题


源码分析：他在long包下，它内部是一个ThreadLocalMap类，主要有set()map()，setInitialValue发
    set方法，获取当前map，如果不存在就创建并设置值

    创建的过程中：创建的是ThreadLocalMap

    threadLocals是一个当前线程的变量，也就是ThreadLocal的输几局都是存放在当前线层的th
    里面的  由此可得：ThreadLocal存放的数据是安全的，

    set方法，获取当前的Thread的map，如果不存在就创建一个，并设置值，如果存在就设置值
    public void set(T value){
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap();
        if(map != null){
            map.set(this,value);
        }else{
            createMap(t,value);
        }
    }


    void createMap(Thread t ,T firstValue){
        t.ThreadLocals = new ThreadLocalMap(this,firstValue);
    }

    