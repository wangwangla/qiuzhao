字符串使用引号括起来，以使得中间的全都是字符串，一面产生歧义

1.引号的使用
    单引号：
        （1）输出一些特殊的字符，将那一段当做字符串来出理
        （2）举例
                #!/bin/bash
                echo '不使用单引号'
                echo $HOME
                echo '$HOME'

                echo a\tb\ta
                echo 'a\tb\ta'

                echo \\
                echo '\\'

                ======输出结果=======

                不使用单引号
                /root
                $HOME
                atbta
                a\tb\ta
                \
                \\
    双引号
        （1）都是输出字符串，但是对于$、\、都是特殊字符
        （2）举例： 
            双引号的使用
                #!/bin/bash
                echo "不使用单引号"
                echo $HOME
                echo "$HOME"

                echo a\tb\ta
                echo "a\tb\ta"

                echo \\
                echo "\\"

                ======输出结果=======
                /root
                /root
                atbta
                a\tb\ta
                \
                \
    倒引号
        （1）以引号中的命令的执行结果代替命令本身
        （2）举例:
        倒引号的使用
                #!/bin/bash
                echo "倒引号的使用"
                echo `who`
                echo `date`
                echo `pwd` 


                ./test07.sh: line 1: o: command not found
                root tty1 2018-10-18 23:58 root pts/0 2018-10-19 00:00 (10.114.28.216) root pts/1 2018-10-19 00:35 (192.168.43.25) root pts/2 2018-10-19 00:46 (10.114.28.216)
                Fri Oct 19 00:57:53 UTC 2018
                /home/kangwang

2.通配符的使用
    （1）常见通配符
        ·*：匹配任意个字符，可以是0个或者多个   a*b
        ·？：匹配一个字符                     a?b
        ·[list]:匹配list中任意一个字符          a[abs]b
        ·[!list]：匹配出了list中的字符          a[!abs]b
        ·[c1-c2]:匹配一个范围                   a[1-5]b
        ·{str1,str2}:匹配任意一个字符串         a{XX,XXX}b
    （2）举例：          
            #!/bin/bash
            mkdir file1 file2 file3 file4 file5
            ls f*
、、、结果是: 
            file1:
            file2:
            file3:
            file4:
            file5:

3.元数据
    ·^:使用于行首定位                       \^l\
    ·$:行尾定位                             \$1\
    ·.:匹配单个字符                         \1.2\
    ·*：匹配0个或者多个位于“*”前的字符       \1*2\
    ·[]:匹配一组                           [list]
    ·[x-y]:匹配指定范围内的任意字符         [a-g]
    ·[^]:匹配不在指定字符串内的任意字符     [^abc]
    ·\:转义元字符                           \*
    ·\<:词尾定位
    ·x\{m\}:字符x重新出现过几次             x\{3\}
    ·x\{m,\}:字符最少出现的次数             x\{3,\}
    ·x\{m,n\}:字符出现m到n次                x\{3,5\}

    举例：
    ls | grep[^a-z]   :匹配开头是小写的
    ls | grep[^H]     :匹配开头是H
    ls | grep[1-9$]   :匹配结尾是1·9
    ls | grep[A-Z$]   :结尾是大写的
    ls | grep l\{2\}  :l出现两次
4.管道：
    名词的引入
        在shell编程上一次的执行结果在下一步的计算中会被使用，可以使用中间变量进行操作，但是并不是所有的都是可以存储的，为了方便实现，
        所以出来了管道。
    可以对管道中的数据进行读写，一旦读取管道就会被清空，数据也会被丢弃，释放出空间。
    我的理解:就是使用管道可以同时执行多个操作                      

    举例：
        #!/bin/bash
        echo "test"
        echo "管道的测试"
        cat test08.sh | head -n 3   #3就是前三行

5.其他特殊字符介绍
    （1）后台运行符
        有的程序可以在前台运行，有的可以在后台运行，在后台运行的时候，在执行的末尾加上   &

        #!/bin/bash
        sleep 100

        运行：
            ./X.sh &

    (2)括号
        括号可以有{}也可以有（），他们既有相同点，也有不同点

        {}：可以用于变量的分辨
        举例：
            #!/bin/bash
            read name
            echo 欢迎$nameww登录
            echo 欢迎${name}登录

            [root@localhost kangwang]# ./test10.sh 
            eee
            欢迎登录
            欢迎eee登录
        （）:可以将数据执行，然后在放到替换的位置
            #!/bin/bash
            read name
            echo 欢迎$(who)登录
            echo 欢迎${who}登录
            echo 欢迎${name}登录 
            ==========结果===========
            ww
            欢迎root tty1 2018-10-18 23:58 root pts/0 2018-10-19 00:00 (10.114.28.216) root pts/1 2018-10-19 00:35 (192.168.43.25) root pts/2 2018-10-19 00:46 (10.114.28.216)登录
            欢迎登录
            欢迎ww登录
            ~


















[目录](https://github.com/wangwangla/biji/tree/master/README.md)