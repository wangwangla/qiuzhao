序列有相同的访问模式：通过下标位移就可以访问到序列任意一个元素
1.序列操作符
    in 、not in ===》 True/False
    seq[index]:获取下标的元素
    seq[index1,index2]:获取下标从index1到index2的元素集合
    seq*expr：执行的次数
    seq1+seq2:连接
    element in seq：是否在里面
    element not in seq：是否在里面
    （1）+:连接两个或者两个相同类型的序列 
        这个不是最块的，也不是最好的方式，
        ·对于字符串通常将他们放在一起一个列表或者可以迭代的对象中，通过join连接
        ·对于列表，使用列表类型的extend函数把两个或者多个列表对象合并起来
        ·简单的可以使用这个方法
    （2）*：重复操作符
    （3）切片操作：
        正偏移从0开始，负偏移从-1开始
        [num]:编译量
        [X:X]:不包括结束，如果不指定开始，那么就从0开始，如果没有最好一个就一直到最后
        [X:x:X]:带有步长的
    （4）序列类型转换
        ·类型转换:
            list（iter）:把可以迭代对象转换为列表
            str（obj）将object抓换为str
2.三引号的
3.字符串：
    （1）创建
        单引号 双引号 三引号
    （2）获取
        strs[index]
        strs[start:end]
        strs[start,end,step]
        负索引
        strs[-1]：表示最后一个
        默认索引
        strs[1:]
    （3）长度
        len(strs)
    （4）+:将两个字符串连接起来
        *：将前面的字符串出现几次    >>> 'aaa'*4    'aaaaaaaaaaaa'
        []：通过索引获取字符串
        [:]:截取字符串
        in:成员关系操作符
        not in:成员操作符
        r:原样输出
4.列表
    （1）创建
        [e1,e2,e3]:里面是数据元素
        [[],[]]
        可以是任意一个数据类型的

    （2）获取
    
    （3）长度
    （4）
5.字典
    （1）创建
        di={12:'kw',33:'dd'}
        [[],[]]
        可以是任意一个数据类型的

    （2）获取
    
    （3）
