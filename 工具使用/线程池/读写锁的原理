读写锁：为什么要读写锁？？
    读写锁的规则是可以共享读，但是不可以共享写
    总结：读读不互斥  读写互斥  写写互斥  
    一般的是：读读互斥  写写互斥  读写互斥  写写也是互斥的

    读写锁的目的是优化，读远大于写的场景的情况下，读写锁为了这种优化而出来的一种机制

    独占锁在并发很高的情况下，效率低下的原因是，高并发的时候临街界上下文切换频繁【有时候为了加快速度，
    不会开辟过多的线程，目的就是为了减少上下文的切换】

    在并发不是很高时候，使用独占锁可能效率会更高



读写锁的实现：
    在读的时候，不可以写，写的时候不可以读，但是读的时候是可以的


RendWriteLock:实现原理：
    他实现了ReentrantReadWriterLOck，提供了一下特性：
    （1）公平性选择：支持公平与非公平的获取锁的方式，吞吐量非公平优先于公平
    （2）可重入锁：读线程获取锁之后，其还可以在此的获取锁，写线程获取写锁之后可以再次获取写锁
    （3）可降级：写线程获取写锁之后，其还可以在此的获取读锁，然后释放写锁，那么此时线成是读锁，也就是降级操作

ReenTranrReadWriteLock的结构
    核心是基于AQS的同步器sync构成的，然后将其扩展出ReadLock[共享锁]和WriteLock[排它锁]


Sync是读写锁的核心，sync是基于AQS实现的，在AQS中核心是state字段和双端队列， 那么一个一个问题来分析



然后同时表示读写锁的
    在代码读写状使用state表示，一共32位，低16表示的是写，高16表示读
    

