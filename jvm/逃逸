逃逸分析：
    逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，他可能被外部方法所引用，例如作为调用参数传递到其他地方
    举例：
    StringBuffer str = new StringBuffer();
    str.append("X");
    return str;

    这个过程中一个方法的对象， 可以被其他地方锁引用，或者改变，这样他的作用域就不是一个方法，而是一个方法加上其他，成为逃逸到方法外部

    如果不想让其逃逸，那么就不直接返回这个局部中的对象

















